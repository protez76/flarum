{"version":3,"sources":["webpack://@fof/best-answer/webpack/bootstrap","webpack://@fof/best-answer/external \"flarum.core.compat['extend']\"","webpack://@fof/best-answer/external \"flarum.core.compat['models/Discussion']\"","webpack://@fof/best-answer/external \"flarum.core.compat['Model']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/CommentPost']\"","webpack://@fof/best-answer/external \"flarum.core.compat['helpers/username']\"","webpack://@fof/best-answer/external \"flarum.core.compat['helpers/icon']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/Notification']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/Button']\"","webpack://@fof/best-answer/external \"flarum.core.compat['utils/PostControls']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/Post']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/PostMeta']\"","webpack://@fof/best-answer/external \"flarum.core.compat['helpers/userOnline']\"","webpack://@fof/best-answer/external \"flarum.core.compat['Component']\"","webpack://@fof/best-answer/external \"flarum.core.compat['app']\"","webpack://@fof/best-answer/external \"flarum.core.compat['components/Badge']\"","webpack://@fof/best-answer/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/best-answer/./src/forum/components/SelectBestAnswerNotification.js","webpack://@fof/best-answer/./src/forum/components/SelectBestAnswerItem.js","webpack://@fof/best-answer/./src/forum/index.js","webpack://@fof/best-answer/./src/forum/addAnsweredBadge.js","webpack://@fof/best-answer/./src/forum/addBestAnswerAction.js","webpack://@fof/best-answer/./src/forum/addBestAnswerView.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","SelectBestAnswerNotification","icon","href","discussion","this","props","notification","subject","app","route","content","translator","trans","Notification","SelectBestAnswerItem","view","post","className","config","data-number","number","user","bestAnswerUser","a","onclick","Component","initializers","add","Discussion","bestAnswerPost","Model","hasOne","hasBestAnswer","attribute","startUserId","Number","firstPostId","canSelectBestAnswer","notificationComponents","selectBestAnswer","extend","items","has","Badge","component","type","label","PostControls","isBestAnswer","id","pushAttributes","isHidden","session","forum","Button","children","save","bestAnswerPostId","bestAnswerUserId","relationships","data","then","current","DiscussionPage","stream","update","redraw","CommentPost","thisPost","userOnline","username","PostMeta","trust","contentHtml","PostComponent","attrs"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['Model'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['helpers/username'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/Notification'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['utils/PostControls'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['components/Post'];","module.exports = flarum.core.compat['components/PostMeta'];","module.exports = flarum.core.compat['helpers/userOnline'];","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['components/Badge'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","import Notification from 'flarum/components/Notification';\n\nexport default class SelectBestAnswerNotification extends Notification {\n    icon() {\n        return 'fas fa-comment-dots';\n    }\n\n    href() {\n        const notification = this.props.notification;\n        const discussion = notification.subject();\n\n        return app.route.discussion(discussion);\n    }\n\n    content() {\n        return app.translator.trans('fof-best-answer.forum.notification.content');\n    }\n}\n","import Component from 'flarum/Component';\nimport icon from 'flarum/helpers/icon';\n\nexport default class SelectBestAnswerItem extends Component {\n    view() {\n        const { post, discussion } = this.props;\n\n        return (\n            <div className=\"Post--BestAnswer\">\n                {post ? (\n                    <span>\n                        {icon('fas fa-check')}\n                        {app.translator.trans('fof-best-answer.forum.best_answer_button')}\n                    </span>\n                ) : (\n                    <a href={app.route.post(post)} config={m.route} data-number={post.number()}>\n                        {icon('fas fa-check')}\n                        {app.translator.trans('fof-best-answer.forum.best_answer_button')}\n                    </a>\n                )}\n\n                <span className=\"BestAnswer--User\">\n                    {app.translator.trans('fof-best-answer.forum.best_answer_label', {\n                        user: discussion.bestAnswerUser(),\n                        a: <a onclick={() => m.route(app.route.user(discussion.bestAnswerUser()))} />,\n                    })}\n                </span>\n            </div>\n        );\n    }\n}\n","import Discussion from 'flarum/models/Discussion';\nimport Model from 'flarum/Model';\n\nimport SelectBestAnswerNotification from './components/SelectBestAnswerNotification';\nimport addBestAnswerAction from './addBestAnswerAction';\nimport addBestAnswerView from './addBestAnswerView';\nimport addAnsweredBadge from './addAnsweredBadge';\n\napp.initializers.add('fof/best-answer', () => {\n    Discussion.prototype.bestAnswerPost = Model.hasOne('bestAnswerPost');\n    Discussion.prototype.bestAnswerUser = Model.hasOne('bestAnswerUser');\n    Discussion.prototype.hasBestAnswer = Model.attribute('hasBestAnswer');\n    Discussion.prototype.startUserId = Model.attribute('startUserId', Number);\n    Discussion.prototype.firstPostId = Model.attribute('firstPostId', Number);\n    Discussion.prototype.canSelectBestAnswer = Model.attribute('canSelectBestAnswer');\n\n    app.notificationComponents.selectBestAnswer = SelectBestAnswerNotification;\n\n    addAnsweredBadge();\n    addBestAnswerAction();\n    addBestAnswerView();\n});\n","import app from 'flarum/app';\nimport { extend } from 'flarum/extend';\nimport Badge from 'flarum/components/Badge';\nimport Discussion from 'flarum/models/Discussion';\n\nexport default function() {\n    extend(Discussion.prototype, 'badges', function(items) {\n        if (this.hasBestAnswer() && !items.has('hidden')) {\n            items.add(\n                'bestAnswer',\n                Badge.component({\n                    type: 'bestAnswer',\n                    icon: 'fas fa-check',\n                    label: app.translator.trans('fof-best-answer.forum.answered_badge'),\n                })\n            );\n        }\n    });\n}\n","import { extend } from 'flarum/extend';\nimport Button from 'flarum/components/Button';\nimport PostControls from 'flarum/utils/PostControls';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\n\nexport default () => {\n    extend(PostControls, 'moderationControls', function(items, post) {\n        const discussion = post.discussion();\n        let isBestAnswer = discussion.bestAnswerPost() && discussion.bestAnswerPost().id() === post.id();\n\n        post.pushAttributes({ isBestAnswer });\n\n        if (post.isHidden() || post.number() === 1 || !discussion.canSelectBestAnswer() || !app.session.user) return;\n\n        if (!app.forum.attribute('canSelectBestAnswerOwnPost') && post.user() && post.user().id() === app.session.user.id()) return;\n\n        items.add(\n            'bestAnswer',\n            Button.component({\n                children: app.translator.trans(isBestAnswer ? 'fof-best-answer.forum.remove_best_answer' : 'fof-best-answer.forum.this_best_answer'),\n                icon: `fa${isBestAnswer ? 's' : 'r'} fa-comment-dots`,\n                onclick: () => {\n                    isBestAnswer = !isBestAnswer;\n\n                    discussion\n                        .save({\n                            bestAnswerPostId: isBestAnswer ? post.id() : 0,\n                            bestAnswerUserId: app.session.user.id(),\n                            relationships: isBestAnswer\n                                ? { bestAnswerPost: post, bestAnswerUser: app.session.user }\n                                : delete discussion.data.relationships.bestAnswerPost,\n                        })\n                        .then(() => {\n                            if (app.current instanceof DiscussionPage) {\n                                app.current.stream.update();\n                            }\n\n                            m.redraw();\n\n                            if (isBestAnswer) {\n                                m.route(app.route.discussion(discussion));\n                            }\n                        });\n                },\n            })\n        );\n    });\n};\n","import { extend } from 'flarum/extend';\r\nimport CommentPost from 'flarum/components/CommentPost';\r\nimport PostComponent from 'flarum/components/Post';\r\nimport PostMeta from 'flarum/components/PostMeta';\r\nimport username from 'flarum/helpers/username';\r\nimport userOnline from 'flarum/helpers/userOnline';\r\n\r\nimport SelectBestAnswerItem from './components/SelectBestAnswerItem';\r\n\r\nexport default () => {\r\n    extend(CommentPost.prototype, 'headerItems', function(items) {\r\n        const post = this.props.post;\r\n\r\n        if (\r\n            post.discussion().bestAnswerPost() &&\r\n            post\r\n                .discussion()\r\n                .bestAnswerPost()\r\n                .id() === post.id() &&\r\n            !post.isHidden()\r\n        ) {\r\n            items.add(\r\n                'isBestAnswer',\r\n                SelectBestAnswerItem.component({\r\n                    post,\r\n                    discussion: post.discussion(),\r\n                })\r\n            );\r\n        }\r\n    });\r\n\r\n    extend(CommentPost.prototype, 'footerItems', function(items) {\r\n        const thisPost = this.props.post;\r\n        const discussion = thisPost.discussion();\r\n        const post = discussion.bestAnswerPost();\r\n\r\n        if (post && !post.isHidden() && thisPost.number() === 1 && !thisPost.isHidden()) {\r\n            const user = post.user();\r\n\r\n            items.add(\r\n                'bestAnswerPost',\r\n                <div className=\"CommentPost\">\r\n                    <div className=\"Post-header\">\r\n                        <ul>\r\n                            <li className=\"item-user\">\r\n                                <div className=\"PostUser\">\r\n                                    {user && userOnline(user)}\r\n                                    <h3>\r\n                                        {user ? (\r\n                                            <a href={app.route.user(user)} config={m.route}>\r\n                                                {username(user)}\r\n                                            </a>\r\n                                        ) : (\r\n                                            username(user)\r\n                                        )}\r\n                                    </h3>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"item-meta\">{PostMeta.component({ post })}</li>\r\n                            {SelectBestAnswerItem.component({\r\n                                post,\r\n                                discussion,\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"Post-body\">{m.trust(post.contentHtml())}</div>\r\n                </div>,\r\n                -10\r\n            );\r\n        }\r\n    });\r\n\r\n    extend(PostComponent.prototype, 'attrs', function(attrs) {\r\n        const post = this.props.post;\r\n\r\n        if (\r\n            post.discussion().bestAnswerPost() &&\r\n            post\r\n                .discussion()\r\n                .bestAnswerPost()\r\n                .id() === post.id() &&\r\n            !post.isHidden()\r\n        ) {\r\n            attrs.className += ' Post--bestAnswer';\r\n        }\r\n    });\r\n};\r\n"],"sourceRoot":""}